---
- name: Copy the Cert & Key file from master to worker1-2 
  synchronize:
    src: "/root/{{ item }}"
    dest: "/root/{{ item }}"
    mode: push
  delegate_to: "{{groups['master'][0]}}"
  with_items: 
    - '{{ inventory_hostname }}.pem'
    - '{{ inventory_hostname }}-key.pem'

- name: Copy the kubeconfig & kube-proxy file from master to worker1-2 
  synchronize:
    src: "/root/{{ item }}"
    dest: "/root/{{ item }}"
    mode: push
  delegate_to: "{{groups['master'][0]}}"
  with_items: 
    - '{{ inventory_hostname }}.kubeconfig '
    - 'kube-proxy.kubeconfig'
    - 'ca.pem'

- name: "Bootstrapping the Kubernetes Worker Nodes"
  shell: |
    wget -q --show-progress --https-only --timestamping \
      https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.21.0/crictl-v1.21.0-linux-amd64.tar.gz \
      https://github.com/opencontainers/runc/releases/download/v1.0.0-rc93/runc.amd64 \
      https://github.com/containernetworking/plugins/releases/download/v0.9.1/cni-plugins-linux-amd64-v0.9.1.tgz \
      https://github.com/containerd/containerd/releases/download/v1.4.4/containerd-1.4.4-linux-amd64.tar.gz \
      https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl \ 
      https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubelet
      
    sudo mkdir -p \
      /etc/cni/net.d \
      /opt/cni/bin \
      /var/lib/kubelet \
      /var/lib/kubernetes \
      /var/run/kubernetes
      
    {
      mkdir containerd
      tar -xvf crictl-v1.21.0-linux-amd64.tar.gz
      tar -xvf containerd-1.4.4-linux-amd64.tar.gz -C containerd
      sudo tar -xvf cni-plugins-linux-amd64-v0.9.1.tgz -C /opt/cni/bin/
      sudo mv runc.amd64 runc
      chmod +x crictl kubectl kubelet runc 
      sudo mv crictl kubectl kubelet runc /usr/local/bin/
      sudo mv containerd/bin/* /bin/
    }

- name: "Setting Containerd"
  shell: |
    sudo mkdir -p /etc/containerd/

    cat << EOF | sudo tee /etc/containerd/config.toml
    [plugins]
      [plugins.cri.containerd]
        snapshotter = "overlayfs"
        [plugins.cri.containerd.default_runtime]
          runtime_type = "io.containerd.runtime.v1.linux"
          runtime_engine = "/usr/local/bin/runc"
          runtime_root = ""
    EOF

    cat <<EOF | sudo tee /etc/systemd/system/containerd.service
    [Unit]
    Description=containerd container runtime
    Documentation=https://containerd.io
    After=network.target

    [Service]
    ExecStartPre=/sbin/modprobe overlay
    ExecStart=/bin/containerd
    Restart=always
    RestartSec=5
    Delegate=yes
    KillMode=process
    OOMScoreAdjust=-999
    LimitNOFILE=1048576
    LimitNPROC=infinity
    LimitCORE=infinity

    [Install]
    WantedBy=multi-user.target
    EOF

- name: "Configure the Kubelet"
  shell: |
    {
      sudo mv {{ inventory_hostname }}-key.pem {{ inventory_hostname }}.pem /var/lib/kubelet/
      sudo mv {{ inventory_hostname }}.kubeconfig /var/lib/kubelet/kubeconfig
      sudo mv ca.pem /var/lib/kubernetes/
    }
- name: "Configure the Kubelet2"
  shell: |
    cat <<EOF | sudo tee /var/lib/kubelet/kubelet-config.yaml
    kind: KubeletConfiguration
    apiVersion: kubelet.config.k8s.io/v1beta1
    authentication:
      anonymous:
        enabled: false
      webhook:
        enabled: true
      x509:
        clientCAFile: "/var/lib/kubernetes/ca.pem"
    authorization:
      mode: Webhook
    clusterDomain: "cluster.local"
    clusterDNS:
      - "192.96.0.10"
    runtimeRequestTimeout: "15m"
    tlsCertFile: "/var/lib/kubelet/{{ inventory_hostname }}.pem"
    tlsPrivateKeyFile: "/var/lib/kubelet/{{ inventory_hostname }}-key.pem"
    EOF

    cat <<EOF | sudo tee /etc/systemd/system/kubelet.service
    [Unit]
    Description=Kubernetes Kubelet
    Documentation=https://github.com/kubernetes/kubernetes
    After=containerd.service
    Requires=containerd.service

    [Service]
    ExecStart=/usr/local/bin/kubelet \\
      --config=/var/lib/kubelet/kubelet-config.yaml \\
      --container-runtime=remote \\
      --container-runtime-endpoint=unix:///var/run/containerd/containerd.sock \\
      --image-pull-progress-deadline=2m \\
      --kubeconfig=/var/lib/kubelet/kubeconfig \\
      --network-plugin=cni \\
      --register-node=true \\
      --v=2
    Restart=on-failure
    RestartSec=5

    [Install]
    WantedBy=multi-user.target
    EOF

- name: 'Reload / Enable / start Containerd & kubelet'
  systemd:
    name: '{{ item }}'
    state: started
    enabled: yes
    daemon_reload: yes
  with_items: 
    - containerd
    - kubelet