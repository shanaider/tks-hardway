---
- name: "Make Directory of kubernetes "
  file:
    path: '{{ item }}'
    state: directory
    mode: 0755
  with_items: 
    - "/var/lib/kubernetes/"
    - "/etc/kubernetes/config"

- name: Copy the Cert & Key file from master0 to master1-2 
  synchronize:
    src: "/root/{{ item }}"
    dest: "/var/lib/kubernetes/{{ item }}"
    mode: push
  delegate_to: "{{groups['master'][0]}}"
  with_items: 
    - 'ca.pem'
    - 'ca-key.pem'
    - 'kubernetes.pem'
    - 'kubernetes-key.pem' 
    - 'service-account.pem'
    - 'service-account-key.pem'
    - 'admin-key.pem'
    - 'admin.pem'
    - 'admin.kubeconfig'
    - 'kube-controller-manager.kubeconfig'
    - 'kube-scheduler.kubeconfig'
    - 'encryption-config.yaml'

- name: "Bootstrapping the Kubernetes Control Plane"   
  get_url:
    url: '{{ item }}'
    dest: /usr/local/bin/
    validate_certs: no
    timeout: 30
  retries: 5
  delay: 3
  register: get_url_result
  until: get_url_result is succeeded
  with_items:
    - https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-apiserver
    - https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-controller-manager
    - https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-scheduler
    - https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl

- name: "Creating single-master with kube-apiserver.service"
  vars:
    HOST_COUNT: "{{ groups['master'] | length }}"
  template:
    src: single-kube-apiserver.service.j2
    dest: /etc/systemd/system/kube-apiserver.service
    owner: root
    group: root
    mode: '0644'
  when:
    - HOST_COUNT == "1"
    - inventory_hostname == groups['master'][0]

- name: "Creating multi-master with kube-apiserver.service"
  vars:
    HOST_COUNT: "{{ groups['master'] | length }}"
  template:
    src: multi-kube-apiserver.service.j2
    dest: /etc/systemd/system/kube-apiserver.service
    owner: root
    group: root
    mode: '0644'
  when:
    - HOST_COUNT == "3"

- name: "Creating kube-controller-manager.service"
  template:
    src: kube-controller-manager.service.j2
    dest: /etc/systemd/system/kube-controller-manager.service
    owner: root
    group: root
    mode: '0644'


- name: "Creating kube-scheduler.yaml"
  copy: 
    dest: /etc/kubernetes/config/kube-scheduler.yaml
    content: |
      apiVersion: kubescheduler.config.k8s.io/v1beta1
      kind: KubeSchedulerConfiguration
      clientConnection:
        kubeconfig: "/var/lib/kubernetes/kube-scheduler.kubeconfig"
      leaderElection:
        leaderElect: true
    owner: root
    group: root
    mode: '0644'

- name: "Creating kube-scheduler.service"
  template:
    src: kube-scheduler.service.j2
    dest: /etc/systemd/system/kube-scheduler.service
    owner: root
    group: root
    mode: '0644'


- name: 'Reload / Enable / start Controller-Plane'
  systemd:
    name: '{{ item }}'
    state: restarted
    enabled: yes
    daemon_reload: yes
  with_items: 
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler

- name: 'Configuring kubectl for Remote Access'
  shell: |
    kubectl config set-cluster kubernetes-the-hard-way \
    --certificate-authority=/var/lib/kubernetes/ca.pem \
    --embed-certs=true \
    --server=https://{{ kube_apiserver_ip }}:6443

    kubectl config set-credentials admin \
      --client-certificate=/var/lib/kubernetes/admin.pem \
      --client-key=/var/lib/kubernetes/admin-key.pem

    kubectl config set-context kubernetes-the-hard-way \
      --cluster=kubernetes-the-hard-way \
      --user=admin

    kubectl config use-context kubernetes-the-hard-way

- name: "set /root/.bashrc"
  lineinfile:
    dest: /root/.bashrc
    state: present
    line: "{{ item }}"
  with_items:
    - source <(kubectl completion bash)
    - alias k=kubectl
    - complete -F __start_kubectl k

- name: 'RBAC for Kubelet Authorization'
  copy:
    dest: "/root/rbac-for-kubelet.yaml"
    content: |
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          annotations:
            rbac.authorization.kubernetes.io/autoupdate: "true"
          labels:
            kubernetes.io/bootstrapping: rbac-defaults
          name: system:kube-apiserver-to-kubelet
        rules:
          - apiGroups:
              - ""
            resources:
              - nodes/proxy
              - nodes/stats
              - nodes/log
              - nodes/spec
              - nodes/metrics
            verbs:
              - "*"
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: system:kube-apiserver
          namespace: ""
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: system:kube-apiserver-to-kubelet
        subjects:
          - apiGroup: rbac.authorization.k8s.io
            kind: User
            name: kubernetes
  when:
    - inventory_hostname == groups['master'][0]

- name: "kubectl apply /root/rbac-for-kubelet.yaml"
  shell: kubectl apply  -f /root/rbac-for-kubelet.yaml
  when:
    - inventory_hostname == groups['master'][0]



