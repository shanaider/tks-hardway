- set_fact:
    runtime_ep: "unix:///var/run/containerd/containerd.sock"
    cri_service: "containerd.service"

- name: "Make Directories"
  file:
    path: '{{ item }}'
    state: directory
    mode: 0755
  with_items: 
    - "/etc/cni/net.d"
    - "/opt/cni/bin"
    - "/var/lib/kubelet"
    - "/var/lib/kubernetes"
    - "/var/run/kubernetes"
    - "/etc/containerd/"
  when: container_manager == 'containerd'

- name: "Download packages runc / cni / containerd"   
  get_url:
    url: '{{ item }}'
    dest: /root
    validate_certs: no
    timeout: 30
  retries: 5
  delay: 3
  register: get_url_result
  until: get_url_result is succeeded
  with_items:
    - https://github.com/opencontainers/runc/releases/download/v1.0.0-rc93/runc.amd64
    - https://github.com/containernetworking/plugins/releases/download/v0.9.1/cni-plugins-linux-amd64-v0.9.1.tgz
    - https://github.com/containerd/containerd/releases/download/v1.4.4/containerd-1.4.4-linux-amd64.tar.gz 
  when: container_manager == 'containerd'

- name: "Unarchive and chmod packages runc / cni / containerd "
  shell: |
    {
      mkdir containerd
      tar -xvf containerd-1.4.4-linux-amd64.tar.gz -C containerd
      sudo tar -xvf cni-plugins-linux-amd64-v0.9.1.tgz -C /opt/cni/bin/
      sudo mv runc.amd64 runc
      chmod +x  runc 
      sudo mv runc /usr/local/bin/
      sudo mv containerd/bin/* /bin/
    }
  when: container_manager == 'containerd'

- name: "Setting Containerd"
  shell: |
    cat << EOF | sudo tee /etc/containerd/config.toml
    [plugins]
      [plugins.cri.containerd]
        snapshotter = "overlayfs"
        [plugins.cri.containerd.default_runtime]
          runtime_type = "io.containerd.runtime.v1.linux"
          runtime_engine = "/usr/local/bin/runc"
          runtime_root = ""
    EOF

    cat <<EOF | sudo tee /etc/systemd/system/containerd.service
    [Unit]
    Description=containerd container runtime
    Documentation=https://containerd.io
    After=network.target

    [Service]
    ExecStartPre=/sbin/modprobe overlay
    ExecStart=/bin/containerd
    Restart=always
    RestartSec=5
    Delegate=yes
    KillMode=process
    OOMScoreAdjust=-999
    LimitNOFILE=1048576
    LimitNPROC=infinity
    LimitCORE=infinity

    [Install]
    WantedBy=multi-user.target
    EOF
  when: container_manager == 'containerd'

- name: 'Reload / Enable / start Containerd'
  systemd:
    name: '{{ item }}'
    state: started
    enabled: yes
    daemon_reload: yes
  with_items: 
    - containerd