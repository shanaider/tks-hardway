---
- name: "Download podman on Ubuntu 20.04"
  shell: |
    echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
    curl -L "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key" | sudo apt-key add -

- name: "install podman"
  apt:
    update_cache: yes
    state: latest
    force_apt_get: yes
    pkg:
    - podman

- name: "Download crun"   
  get_url:
    url: '{{ item }}'
    dest: /usr/local/bin/crun
    mode: '0755'
    validate_certs: no
    timeout: 30
  with_items:
    - https://github.com/containers/crun/releases/download/1.4.4/crun-1.4.4-linux-amd64


- name: "Make Calico-SA directory"
  file: 
    path=/etc/calico/sa 
    state=directory mode=0755

- name: "kubectl check calico-sa secret"
  shell: kubectl get sa  calico-node -n kube-system -o jsonpath={.secrets[].name} 
  retries: 30
  delay: 3
  register: calico_sa
  until: calico_sa.rc == 0

- name: "kubectl get secret cert"
  shell: kubectl get secret {{ calico_sa.stdout }} -n kube-system -o jsonpath={.data.ca\\.crt} | base64 -d  > /etc/calico/sa/ca.crt
  retries: 60
  delay: 3
  register: result
  until: result.rc == 0

- name: "kubectl get secret token"
  shell: kubectl get secret {{ calico_sa.stdout }} -n kube-system -o jsonpath={.data.token} | base64 -d > /etc/calico/sa/token
  retries: 60
  delay: 3
  register: result
  until: result.rc == 0

- name: "kubectl get secret namespace"
  shell: kubectl get secret {{ calico_sa.stdout }} -n kube-system -o jsonpath={.data.namespace} | base64 -d > /etc/calico/sa/namespace
  retries: 60
  delay: 3
  register: result
  until: result.rc == 0

- name: "Creating /usr/local/bin/start-calico-node.sh"
  copy: 
    dest: "/usr/local/bin/start-calico-node.sh"
    mode: '0755'
    content: |
      #!/bin/bash
      export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
      mkdir -p /var/log/calico
      mkdir -p /var/run/calico
      mkdir -p /var/lib/calico

      # while ! $(curl -m 5 -k https://127.0.0.1:6443/version -sS -o /dev/null)
      # do
      # sleep 5
      # done

      /usr/bin/podman stop calico-node &>/dev/null
      /usr/bin/podman rm calico-node &>/dev/null
      ifconfig tunl0 down

      # do not use run with -d
      # do not use run with -d
      podman run --runtime /usr/local/bin/crun --network=host --privileged --name=calico-node --restart=unless-stopped \
      -e KUBERNETES_SERVICE_HOST={{ hostvars[inventory_hostname]['internal_ip'] }} \
      -e KUBERNETES_SERVICE_PORT=6443 \
      -e CALICO_NETWORKING_BACKEND=bird \
      -e ETCD_ENDPOINTS=https://{{ hostvars[inventory_hostname]['internal_ip'] }}:2379 \
      -e ETCD_DISCOVERY_SRV= \
      -e ETCD_CA_CERT_FILE=/etc/calico/etcd/etcd-ca \
      -e ETCD_KEY_FILE=/etc/calico/etcd/etcd-key \
      -e ETCD_CERT_FILE=/etc/calico/etcd/etcd-cert \
      -e CALICO_IPV4POOL_CIDR=192.169.0.0/16 \
      -e WAIT_FOR_DATASTORE=true \
      -e TZ=Asia/Bangkok \
      -v /dev/null:/etc/service/enabled/bird6 \
      -v /var/log/calico:/var/log/calico \
      -v /var/run/calico:/var/run/calico \
      -v /var/lib/calico:/var/lib/calico \
      -v /lib/modules:/lib/modules \
      -v /run:/run \
      -v /etc/calico/etcd:/etc/calico/etcd \
      -v /etc/calico/sa:/var/run/secrets/kubernetes.io/serviceaccount \
      docker.io/calico/node:v3.20.4
      EOF

- name: "Creating Calico systemd service"
  shell: |
    cat << EOF |sudo tee /etc/systemd/system/calico-node.service
    [Unit]
    Description=calico-node
    After=etcd.service

    [Service]
    LimitNOFILE=1000000
    LimitNPROC=1000000
    ExecStart=/usr/local/bin/start-calico-node.sh
    ExecStop=/usr/bin/podman stop calico-node
    StandardOutput=file:/dev/null
    StandardError=file:/dev/null
    Restart=on-failure

    [Install]
    WantedBy=multi-user.target
    EOF

- name: "Start calico-node service"
  systemd:
    name: calico-node
    state: started
    enabled: yes
    daemon_reload: yes

