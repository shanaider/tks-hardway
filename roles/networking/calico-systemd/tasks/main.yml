---
- name: "Download podman on Ubuntu 20.04"
  shell: |
    echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
    curl -L "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key" | sudo apt-key add -

- name: "install podman"
  apt:
    update_cache: yes
    state: latest
    force_apt_get: yes
    pkg:
    - podman

- name: "Download crun"   
  get_url:
    url: '{{ item }}'
    dest: /usr/local/bin/crun
    mode: '0755'
    validate_certs: no
    timeout: 30
  retries: 3
  with_items:
    - https://github.com/containers/crun/releases/download/1.4.4/crun-1.4.4-linux-amd64


- name: "Make Calico-SA directory"
  file: 
    path=/etc/calico/sa 
    state=directory mode=0755

- name: "kubectl check calico-sa secret"
  shell: kubectl get sa  calico-node -n kube-system -o jsonpath={.secrets[].name} 
  retries: 30
  delay: 3
  register: calico_sa
  until: calico_sa.rc == 0

- name: "kubectl get secret cert"
  shell: kubectl get secret {{ calico_sa.stdout }} -n kube-system -o jsonpath={.data.ca\\.crt} | base64 -d  > /etc/calico/sa/ca.crt
  retries: 60
  delay: 3
  register: result
  until: result.rc == 0

- name: "kubectl get secret token"
  shell: kubectl get secret {{ calico_sa.stdout }} -n kube-system -o jsonpath={.data.token} | base64 -d > /etc/calico/sa/token
  retries: 60
  delay: 3
  register: result
  until: result.rc == 0

- name: "kubectl get secret namespace"
  shell: kubectl get secret {{ calico_sa.stdout }} -n kube-system -o jsonpath={.data.namespace} | base64 -d > /etc/calico/sa/namespace
  retries: 60
  delay: 3
  register: result
  until: result.rc == 0

- name: "Creating Single-calico-etcd service"
  vars:
    HOST_COUNT: "{{ groups['etcd'] | length }}"
  template:
    src: single-calico-node.service.j2
    dest: /usr/local/bin/start-calico-node.sh
    owner: root
    group: root
    mode: '0755'
  when:
    - HOST_COUNT == "1"
    - inventory_hostname == groups['etcd'][0]

- name: "Creating Multi-calico-etcd service"
  vars:
    HOST_COUNT: "{{ groups['etcd'] | length }}"
  template:
    src: multi-calico-node.service.j2
    dest: /usr/local/bin/start-calico-node.sh
    owner: root
    group: root
    mode: '0755'
  when:
    - HOST_COUNT == "3"


- name: "Creating Calico systemd service"
  shell: |
    cat << EOF |sudo tee /etc/systemd/system/calico-node.service
    [Unit]
    Description=calico-node
    After=etcd.service

    [Service]
    LimitNOFILE=1000000
    LimitNPROC=1000000
    ExecStart=/usr/local/bin/start-calico-node.sh
    ExecStop=/usr/bin/podman stop calico-node
    StandardOutput=file:/dev/null
    StandardError=file:/dev/null
    Restart=on-failure

    [Install]
    WantedBy=multi-user.target
    EOF

- name: "Start calico-node service"
  systemd:
    name: calico-node
    state: started
    enabled: yes
    daemon_reload: yes

